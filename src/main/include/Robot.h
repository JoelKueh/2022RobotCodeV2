/******************************************************************************
 * 
 * This file is the "preview" of the robot class. (the h stands for header)
 * Everything that is in the robot class is "prototyped" here.
 * Once again, some of this code is autogenerated by FRC.
 * 
******************************************************************************/

/******************************************************************************
 * If you haven't seen this before (#pragma once), it is just a safety to make sure this file
 * Is only included once. If two files were to include a class like Turret.h
 * and then both files were included into Robot.h, then there would be a problem
 * as the compiler would detect that there were two definitions for the Turret
 * class, because the file would be in two places at once.
*******************************************************************************/

#pragma once

/******************************************************************************
 * Next, more includes.
 * Includes cascade in a way. When Robot.cpp includes Robot.h
 * it also includes all of the include files that came with it.
******************************************************************************/

#include <string>

#include <frc/TimedRobot.h>
#include <frc/XboxController.h>
#include <frc/Timer.h>
#include <frc/DigitalInput.h>
#include <frc/ADXRS450_Gyro.h>

#include "Drive.h"
#include "Turret.h"
#include "Hanger.h"
#include "Intake.h"
#include "Limelight.h"
#include "WiringDiagram.h"

/******************************************************************************
 * A Brief Explanation of Class Declarations:
 * 
 * First, looking at the top line...
 *  class Robot defines a class named a robot
 *  After that declaration, there is a :, this is a feature called inheritance.
 *    Inheritance is a rather complex topic, I would recommend that
 *    you look it up online if you really want to understand it.
 *    In short, it means that the class Robot, is based off of the frc::TimedRobot
 *    class. It "inherits" all of the mehtods from that class.
 * After the "{" we start defining the contents of the class.
 *    Before we do, take a look at Robot.cpp line 60, there I make an instance of the Turret class called m_Turret
 *      (technically it is a pointer to an instance of the Turret class, but it behaves much the same)
 *    Throughout Robot.cpp, I use methods on class instances like m_Turret with the "->" syntax.
 *      There, I am accessing the functions and variables which are defined in those classes.
 *      I am specifically accessing those methods from OUTSIDE OF THE CLASS
 *      I am accessing the members of Turret from inside of Robot. The significance of this will be apparent later.
 *    The class can contain any number of different variables and functions.
 *    Some methods and variables are what we call "public" and others are called private
 *      If something is public, it means that it can be accessed outside of the class.
 *      After a class is initialized, methods and variables are accessed with the syntax
 *        "my_class.method()" or "my_class.variable". (In many cases the "." is replaced with a "->"
 *        to understand why, look up class pointers.)
 *        Or, read my partial explanation in Drive.h line 47
 *      So how does this apply to public and private variables and methods?
 *      I am allowed to access all of the public methods with the "." or "->" operator.
 *      So I can do my_robot.RobotInit(), or my_robot.AutonomousPeriodic()
 *      but I cannot run my_robot.BasicAuto() as long as I am outside of the class.
 *      Similarly, look at Turret.h. Under Public: I have a set of functions which are
 *        made to be used inside of Robot.cpp.
 *      Under Private: I have a set of constants and variables that I only need
 *        to access from inside of the Turret.cpp file.
 * And thats all there is in the Robot.h file.
 * The methods and variables that we defined here are all expanded upon in
 * the Robot.cpp file as you read earlier.
**********************************************************************************************************/

class Robot : public frc::TimedRobot {
 public:
  void RobotInit() override;
  void RobotPeriodic() override;
  void AutonomousInit() override;
  void AutonomousPeriodic() override;
  void TeleopInit() override;
  void TeleopPeriodic() override;
  void DisabledInit() override;
  void DisabledPeriodic() override;
  void TestInit() override;
  void TestPeriodic() override;
  void SimulationInit() override;
  void SimulationPeriodic() override;

 private:
  units::time::second_t lastShotTime;
  units::time::second_t lastKickTime;

  units::time::second_t autoFirstShotTime;
  units::time::second_t autoSecondTurnTime;
  bool firstShotDone = false;

  double overriddenRPM = 2500;
  double overriddenElevator = 10;

  bool resetDone = false;
  bool aimOverridden = false;

  bool intakeOut = true;
  bool hangerOut = false;

  bool targeting = false;
  bool lockedOn = false;

  int autoState = 0;
  int aimingState = 0;

  frc::XboxController* m_Xbox;
  frc::Timer* m_Timer;
  frc::ADXRS450_Gyro* m_Gyro;
  frc::DigitalInput* m_AutoSwitch;
  bool m_AutoSwitchState = false;
  Drive* m_Drive;
  Turret* m_Turret;
  Hanger* m_Hanger;
  Intake* m_Intake;
  Limelight* m_Limelight;

  void BasicAuto();
  void TwoBallAuto();
  void ThreeBallAuto();
  void AimOverriddenControl();
  bool AimedControl();
  bool ShootUnaimed();
  void StopTargeting();
};
